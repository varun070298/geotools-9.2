/* Generated By:JJTree&JavaCC: Do not edit this line. ECQLParserTokenManager.java */
package org.geotools.filter.text.generated.parsers;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;

public class ECQLParserTokenManager implements ECQLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 34:
         jjmatchedKind = 74;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 62;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 63;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 71;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 72;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 66;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 73;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 68;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 69;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 70;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 67;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x22000L);
      case 61:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20000000200L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x140008000800000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0xa000000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80510000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x282020000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000000080000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x800017400000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80200000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x400000e00000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1000000008000800L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x10000000000400L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x140000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 84:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x1004000040000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 91:
         jjmatchedKind = 64;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 65;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000000200L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x140008000800000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xa000000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80510000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x282020000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000000080000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800017400000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80200000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000e00000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000008000800L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000000400L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x140000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 116:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x1004000040000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000080000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 68:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x72000d000800000L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2004400080200000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 78:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x802010100200L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x9100140000800L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 82:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000040000L);
      case 83:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x10e08000000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x80020000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000080000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x72000d000800000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2004400080200000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x802010100200L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x9100140000800L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000040000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10e08000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80020000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000L);
      case 68:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x210100000000000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x80080040400000L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000f08080000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000080000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x42001000000000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 84:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x404820000800000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001200000040000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 89:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000L);
      case 100:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x210100000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80080040400000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000f08080000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000080000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x42001000000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x404820000800000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001200000040000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x20200000000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400822080000000L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 74:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 76:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x40100000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2100008000000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2180000080000L);
      case 84:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1888000e00000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 88:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20200000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400822080000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40100000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2100008000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2180000080000L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1888000e00000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 120:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8004000000000L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000800000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x81000000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1004000e00000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x10202000000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x100010000000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000100000L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400808000000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000080000000L);
      case 84:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20080000000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000030000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8004000000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000800000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x81000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1004000e00000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10202000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x100010000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000100000L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400808000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000080000000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20080000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000030000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 68:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2003000000800000L);
      case 71:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x88400000000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x4400000000L);
      case 78:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x2100000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000L);
      case 83:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x800001080000000L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2003000000800000L);
      case 103:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x88400000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4400000000L);
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2100000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800001080000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 69:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x800800000000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 78:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8400000000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x100a00000000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x10002000000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x1080000000L);
      case 83:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x800800000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8400000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100a00000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x10002000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1080000000L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x280000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000800000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 83:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x280000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000800000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L);
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x280000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x280000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 71:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 84:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 9;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 103:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x800001000000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      case 88:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x800001000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000001000000000L);
      case 78:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 11;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000001000000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 11;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000001000000000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 83:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000001000000000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 83:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 13;
         }
         break;
      case 84:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 13;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 13;
         }
         break;
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 14;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      case 103:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 14;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 17;
         }
         break;
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 111;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(0, 7);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(57);
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 1:
                  if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  break;
               case 2:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 4:
                  if (curChar == 39 && kind > 6)
                     kind = 6;
                  break;
               case 5:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7040000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 16);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 22);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 30);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 30);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 22);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 22);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 32);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 30);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 30);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 30);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if (curChar == 34)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 34 && kind > 91)
                     kind = 91;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(0, 7);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 14);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(35, 37);
                  break;
               case 63:
                  if (curChar != 46)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjAddStates(38, 39);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if (curChar == 58)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(40, 42);
                  break;
               case 102:
                  if (curChar == 46)
                     jjCheckNAdd(103);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(43, 45);
                  break;
               case 105:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 108:
                  if (curChar == 58)
                     jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(55);
                  }
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 3:
                  jjAddStates(8, 10);
                  break;
               case 5:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x10004000100040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x10004000100040L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 19:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x10000000100L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x8000000080000L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 32:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(37, 23);
                  break;
               case 39:
                  if ((0x200000002000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(40, 23);
                  break;
               case 41:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(42, 23);
                  break;
               case 43:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x10000000100L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 48:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(55);
                  break;
               case 57:
                  jjAddStates(48, 49);
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 77:
                  if ((0x400000004000000L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 93:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 104:
                  if ((0x400000004000000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(48, 49);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 111 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   60, 61, 14, 62, 63, 65, 68, 84, 2, 3, 4, 21, 22, 35, 36, 38, 
   39, 25, 26, 31, 32, 34, 30, 27, 28, 40, 41, 45, 46, 50, 51, 53, 
   30, 47, 48, 62, 63, 65, 77, 78, 102, 104, 105, 103, 104, 105, 17, 18, 
   57, 58, 66, 67, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\75", 
"\74\76", "\76", "\74", "\76\75", "\74\75", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\50", "\51", "\133", "\135", 
"\54", "\73", "\56", "\57", "\72", "\52", "\53", "\55", "\42", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff41L, 0xe201fffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[111];
private final int[] jjstateSet = new int[222];
protected char curChar;
public ECQLParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ECQLParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 111; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
